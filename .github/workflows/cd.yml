name: CD Pipeline

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker images
  build-images:
    name: Build and Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      gateway-image: ${{ steps.meta-gateway.outputs.tags }}
      orchestrator-image: ${{ steps.meta-orchestrator.outputs.tags }}
      workers-image: ${{ steps.meta-workers.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            
      - name: Extract metadata for Gateway
        id: meta-gateway
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/gateway
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            
      - name: Extract metadata for Orchestrator
        id: meta-orchestrator
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/orchestrator
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            
      - name: Extract metadata for Workers
        id: meta-workers
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/workers
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            
      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/frontend
          file: ./apps/frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push Gateway image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/gateway
          file: ./apps/gateway/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-gateway.outputs.tags }}
          labels: ${{ steps.meta-gateway.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push Orchestrator image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/orchestrator
          file: ./apps/orchestrator/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-orchestrator.outputs.tags }}
          labels: ${{ steps.meta-orchestrator.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push Workers image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/workers
          file: ./apps/workers/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-workers.outputs.tags }}
          labels: ${{ steps.meta-workers.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-east-1
          
      - name: Terraform Init
        working-directory: terraform/staging
        run: terraform init
        
      - name: Terraform Plan
        working-directory: terraform/staging
        run: |
          terraform plan \
            -var="frontend_image=${{ needs.build-images.outputs.frontend-image }}" \
            -var="gateway_image=${{ needs.build-images.outputs.gateway-image }}" \
            -var="orchestrator_image=${{ needs.build-images.outputs.orchestrator-image }}" \
            -var="workers_image=${{ needs.build-images.outputs.workers-image }}" \
            -out=tfplan
        continue-on-error: true
        
      - name: Terraform Apply
        working-directory: terraform/staging
        run: terraform apply tfplan
        if: github.event_name == 'push'
        
      - name: Wait for deployment
        run: |
          echo "Waiting for services to be ready..."
          sleep 60
          
      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test logic here
          
      - name: Run integration tests
        run: |
          echo "Running integration tests on staging..."
          # Add integration test logic here

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, deploy-staging]
    environment: production
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1
          
      - name: Terraform Init
        working-directory: terraform/production
        run: terraform init
        
      - name: Terraform Plan
        working-directory: terraform/production
        run: |
          terraform plan \
            -var="frontend_image=${{ needs.build-images.outputs.frontend-image }}" \
            -var="gateway_image=${{ needs.build-images.outputs.gateway-image }}" \
            -var="orchestrator_image=${{ needs.build-images.outputs.orchestrator-image }}" \
            -var="workers_image=${{ needs.build-images.outputs.workers-image }}" \
            -out=tfplan
        continue-on-error: true
        
      - name: Terraform Apply
        working-directory: terraform/production
        run: terraform apply tfplan
        
      - name: Wait for deployment
        run: |
          echo "Waiting for services to be ready..."
          sleep 120
          
      - name: Run smoke tests
        run: |
          echo "Running smoke tests on production..."
          # Add smoke test logic here
          
      - name: Run load tests
        run: |
          echo "Running load tests on production..."
          # Add load test logic here
          
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Automated release for version ${{ github.ref }}
            
            ## Changes
            - Deployed to production
            - All tests passing
            - Load tests completed
            
          draft: false
          prerelease: false

  # Post-deployment monitoring
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Monitor application health
        run: |
          echo "Monitoring application health..."
          # Add health check logic here
          
      - name: Monitor error rates
        run: |
          echo "Monitoring error rates..."
          # Add error monitoring logic here
          
      - name: Monitor performance metrics
        run: |
          echo "Monitoring performance metrics..."
          # Add performance monitoring logic here
          
      - name: Send deployment notification
        run: |
          echo "Sending deployment notification..."
          # Add notification logic here
